[
  {
    "objectID": "notebooks/01-Tokenizing.html",
    "href": "notebooks/01-Tokenizing.html",
    "title": "Tokenization",
    "section": "",
    "text": "1 Tokenizing text\nWe’ll use an of-the-shelve tokenizer for doing Byte Pair Encoding (BPE). We’ll use tiktoken for this.\n\n%conda install -y tiktoken\n\nLet’s load a text and tokenize it:\n\nimport tiktoken\n\nfilepath = '../data/dracula.txt'\n\ndef load_text(path):\n    with open(path, 'r') as f:\n        raw_text = f.read()\n    return raw_text\n\ndef tokens_from_text(text: str):\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n    integers = tokenizer.encode(text)\n    return integers\n\ndef text_from_tokens(tokens: list[int]):\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n    text = tokenizer.decode(tokens)\n    return text\n\nThis now allows us to load text and turn it into tokens (each identified by an integer) or the reverse: given a set of tokens, reconstruct the text from them:\n\ndef get_sample_text(num_chars:int = 40):\n    raw_text = load_text(filepath)\n    return raw_text[:num_chars]\n\nsample_text = get_sample_text()\nprint(sample_text)\n\ntokens = tokens_from_text(sample_text)\nprint(tokens)\n\ntext = text_from_tokens(tokens)\nprint(text)\n\nThe Project Gutenberg eBook of Dracula\n \n[464, 4935, 20336, 46566, 286, 41142, 198, 220]\nThe Project Gutenberg eBook of Dracula\n \n\n\n\n\n2 Creating a dataset\nWe’ll first make sure to install pytorch: conda install pytorch cpuonly -c pytorch.\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n\nclass MyDataset(Dataset):\n    def __init__(self, txt: str, tokenizer, max_length=16, stride=4):\n        \"\"\"\n        Args:\n            txt (str): The input text to tokenize and split into sequences.\n            tokenizer: The tokenizer used to encode the text into token ids.\n            max_length (int): The context length, i.e., the number of tokens in each input sequence.\n            stride (int): The step size between the start of consecutive sequences.\n        \"\"\"\n        self.tokenizer = tokenizer\n        self.max_length = max_length  # context length for each input sequence\n        self.stride = stride\n        self.token_ids = self.tokenizer.encode(txt)\n        self.length = len(self.token_ids)\n\n        self.input_ids = []    # list of input tokens, our \"context\" as input to the LLM\n        self.target_ids = []   # list of target tokens that will need to be predicted, our \"context\" shifted by stride\n\n        for i in range(0, len(self.token_ids) - self.max_length):\n            input_chunk = self.token_ids[i:i + self.max_length]\n            target_chunk = self.token_ids[i + 1:i + self.max_length + 1]\n            self.input_ids.append(torch.tensor(input_chunk))\n            self.target_ids.append(torch.tensor(target_chunk))\n\n    def __len__(self):\n        return len(self.input_ids)\n    \n    def __getitem__(self, idx):\n        return self.input_ids[idx], self.target_ids[idx]\n    \ndef create_dataloader(txt:str, batch_size=4, max_length=256, stride=128, shuffle=True, drop_last=True,num_workers=0):\n    \"\"\"\n    Create a DataLoader for the given text.\n    Args:\n        txt (str): The input text to tokenize and split into sequences.\n        batch_size (int): Number of samples per batch.\n        max_length (int): The context length, i.e., the number of tokens in each input sequence.\n        stride (int): The step size between the start of consecutive sequences.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n        drop_last (bool): Whether to drop the last incomplete batch.\n        num_workers (int): Number of subprocesses to use for data loading.\n    \"\"\"\n\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n    dataset = MyDataset(txt, tokenizer, max_length=max_length, stride=stride)\n    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=shuffle, drop_last=drop_last, num_workers=num_workers)\n    return dataloader\n\nLet’s test our dataloader now:\n\ntext = get_sample_text(300)\nprint(\"sample_text: \", text)\nprint(\"======\")\ndataloader = create_dataloader(txt=text, batch_size=2, max_length=8, stride=2, drop_last=False)\nfor batch in dataloader:\n    input_ids, target_ids = batch\n    print(\"Input IDs first batch: \\n\", input_ids)\n    print(\"Target IDs first batch: \\n\", target_ids)\n    break  # Just show the first batch\nprint(\"Total batches:\", len(dataloader))\nprint(\"Batch size:\", dataloader.batch_size)\nprint(\"Number of workers:\", dataloader.num_workers)\n\nsample_text:  The Project Gutenberg eBook of Dracula\n    \nThis ebook is for the use of anyone anywhere in the United States and\nmost other parts of the world at no cost and with almost no restrictions\nwhatsoever. You may copy it, give it away or re-use it under the terms\nof the Project Gutenberg License included \n======\nInput IDs first batch: \n tensor([[41142,   198,   220,   220,   220,   220,   198,  1212],\n        [  220,   220,   220,   198,  1212, 47179,   318,   329]])\nTarget IDs first batch: \n tensor([[  198,   220,   220,   220,   220,   198,  1212, 47179],\n        [  220,   220,   198,  1212, 47179,   318,   329,   262]])\nTotal batches: 31\nBatch size: 2\nNumber of workers: 0\n\n\n\n\n3 From token IDs to Embeddings\nWe now need to translate our token IDs to multi-dimensional vectors that can be used as input for our neural network. What we have here: - nr_batches: the count of batches - batch_size: the number of samples in each batch, before we’ll update our weights - max_length: the length of our context window: how many tokens there are in every sample, to predict the next token from - vocab_size: the size of our vocabulary (which in the case of tiktoken “gpt2” tokenizer is 50,257 tokens) - embedding_dim: the length of each embedding vector, representing a single token (12,288 for GPT-3 for example)\nLet’s work through a simple example first, assuming a single sample, four token input:\n\ntorch.manual_seed(42)                                           # For reproducibility\ninput_ids = torch.tensor([3, 5, 1, 4 ])                         # Example input tensor, four tokens\n\nvocab_size = 6                                                  # Size of the vocabulary, here 6 tokens\nembedding_dim = 8                                               # Size of the embedding vector for each token, here 8 floats\nembedding_layer = torch.nn.Embedding(vocab_size, embedding_dim)       # Create the embedding layer\n\nprint(embedding_layer.weight)\nprint(\"embedding_layer shape:\", embedding_layer.weight.shape)   # Shape of the embedding matrix\n\nParameter containing:\ntensor([[ 1.9269,  1.4873,  0.9007, -2.1055,  0.6784, -1.2345, -0.0431, -1.6047],\n        [-0.7521,  1.6487, -0.3925, -1.4036, -0.7279, -0.5594, -0.7688,  0.7624],\n        [ 1.6423, -0.1596, -0.4974,  0.4396, -0.7581,  1.0783,  0.8008,  1.6806],\n        [ 1.2791,  1.2964,  0.6105,  1.3347, -0.2316,  0.0418, -0.2516,  0.8599],\n        [-1.3847, -0.8712, -0.2234,  1.7174,  0.3189, -0.4245,  0.3057, -0.7746],\n        [-1.5576,  0.9956, -0.8798, -0.6011, -1.2742,  2.1228, -1.2347, -0.4879]],\n       requires_grad=True)\nembedding_layer shape: torch.Size([6, 8])\n\n\nThis is our embedding layer, having for every of the 6 tokens in the vocabulary, a vector of 8 floats representing that token. nn.Embedding. This module is a lookup table that stores embeddings of a fixed dictionary and size. When you pass a tensor of token IDs to it, it returns the corresponding embedding vectors for each token. This is commonly used in NLP models to convert token IDs into dense vector representations that can be processed by neural networks.\nLearn more in the PyTorch documentation for nn.Embedding.\n\n# lookup the embeddings for the input tokens\nembeddings = embedding_layer(input_ids)                        # Shape: (4, 8), 4 tokens, each with an 8-dimensional vector\nprint(\"input_ids:\\n\", input_ids)\nprint(\"embedding layer:\\n\", embedding_layer.weight)\nprint(\"embedding layer shape:\\n\", embedding_layer.weight.shape)\nprint(\"embeddings shape:\\n\", embeddings.shape)\nprint(\"embeddings:\\n\", embeddings)\n\ninput_ids:\n tensor([3, 5, 1, 4])\nembedding layer:\n Parameter containing:\ntensor([[ 1.9269,  1.4873,  0.9007, -2.1055,  0.6784, -1.2345, -0.0431, -1.6047],\n        [-0.7521,  1.6487, -0.3925, -1.4036, -0.7279, -0.5594, -0.7688,  0.7624],\n        [ 1.6423, -0.1596, -0.4974,  0.4396, -0.7581,  1.0783,  0.8008,  1.6806],\n        [ 1.2791,  1.2964,  0.6105,  1.3347, -0.2316,  0.0418, -0.2516,  0.8599],\n        [-1.3847, -0.8712, -0.2234,  1.7174,  0.3189, -0.4245,  0.3057, -0.7746],\n        [-1.5576,  0.9956, -0.8798, -0.6011, -1.2742,  2.1228, -1.2347, -0.4879]],\n       requires_grad=True)\nembedding layer shape:\n torch.Size([6, 8])\nembeddings shape:\n torch.Size([4, 8])\nembeddings:\n tensor([[ 1.2791,  1.2964,  0.6105,  1.3347, -0.2316,  0.0418, -0.2516,  0.8599],\n        [-1.5576,  0.9956, -0.8798, -0.6011, -1.2742,  2.1228, -1.2347, -0.4879],\n        [-0.7521,  1.6487, -0.3925, -1.4036, -0.7279, -0.5594, -0.7688,  0.7624],\n        [-1.3847, -0.8712, -0.2234,  1.7174,  0.3189, -0.4245,  0.3057, -0.7746]],\n       grad_fn=&lt;EmbeddingBackward0&gt;)\n\n\n\n\n4 Adding positional information\nOne downside of the self-attention mechanics that we’ll work with later is that there’s no positional information to the tokens. It all looks the same to the neural net as we have it for now; it won’t distinguish between the order of words/tokens in our input. We’ll address this by creating another layer of embeddings, our positional embeddings with dimension [max_length, embedding_dim].\nFor each position embedding, we’ll chose the same length as our embedding_dim, so that we can add each of the respective positional vector to each of the corresponding token embedding vector.\nSo in terms of dimensions, we have: - [max_length, embedding dim] as our single sample input embedding vector. - [max_length, embedding dim] as our position embedding vector\nIt’s those two we’ll add together to form our input to the LLM.\nLet’s start from our batch again, using somewhat more realistic sizes and dimensions:\n\ncontext_length = 4          # Maximum length of the input sequences\nvocab_size = 50257          # Size of the vocabulary for GPT-2\nembedding_dim = 256         # Let's say we want 256-dimensional embeddings\n\nembedding_layer = torch.nn.Embedding(vocab_size, embedding_dim)\n\ndataloader = create_dataloader(txt=text, batch_size=2, max_length=context_length, stride=2, drop_last=True)\ndata_iter = iter(dataloader)\ninputs, targets = next(data_iter)\n\nprint(\"First batch of inputs and targets:\")\nprint(\"Inputs shape:\", inputs.shape)            # Shape: (batch_size, max_length)\nprint(\"Targets shape:\", targets.shape)          # Shape: (batch_size, max_length)\n\n# Get the embeddings for the input tokens\nembeddings = embedding_layer(inputs)            # Shape: (batch_size, max_length, embedding_dim)\nprint(\"Embeddings shape:\", embeddings.shape)    # Shape: (batch_size, max_length, embedding_dim)\n\n# Get the embedding layer for the positions\npos_embedding_layer = torch.nn.Embedding(context_length, embedding_dim)\npos_embeddings = pos_embedding_layer(torch.arange(context_length))  # Shape: (context_length, embedding_dim)\nprint(\"Position embeddings shape:\", pos_embeddings.shape)           # Shape: (context_length, embedding_dim)\n\n# Combine input embeddings and position embeddings\ncombined_embeddings = embeddings + pos_embeddings                   # Shape: (batch_size, max_length, embedding_dim)\nprint(\"Combined embeddings shape:\", combined_embeddings.shape)  # Shape: (batch_size, max_length, embedding_dim)\n\nFirst batch of inputs and targets:\nInputs shape: torch.Size([2, 4])\nTargets shape: torch.Size([2, 4])\nEmbeddings shape: torch.Size([2, 4, 256])\nPosition embeddings shape: torch.Size([4, 256])\nCombined embeddings shape: torch.Size([2, 4, 256])\n\n\nThis means that in our first batch we have: - 2 samples - each 4 tokens - each represented by an embedding vector of 256",
    "crumbs": [
      "Notebooks",
      "Tokenization"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html",
    "href": "theory/cross-entropy-loss.html",
    "title": "Cross-Entropy Loss",
    "section": "",
    "text": "The Cross-Entropy Loss function is typically used as a loss function in multi-class classification problems.\nThe output for a neural network doing classification is a set of probabilities (a so-called probability distribution where every class is associated with a probability). We try to adapt weights to optimize the resulting probabilities to match as close as possible the ground truth. To iteratively adapt the weights and improve the prediction, a loss function is needed. For multi-class classification, Cross-Entropy Loss is used.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#shannon-information",
    "href": "theory/cross-entropy-loss.html#shannon-information",
    "title": "Cross-Entropy Loss",
    "section": "1 Shannon Information",
    "text": "1 Shannon Information\nAn occurrence of an unlikely event gives more information than the occurrence of a very likely event. Shannon came up with a way to quantify how unpredictable a series of events is; measuring the “disorder” of system and quantifying uncertainty of a probability distribution.\nLet’s do a thought experiment with two people: person A and person B. They can agree upfront on the meaning of a series of bits thrown back and forth over a wall (like some mapping function saying “0101” means event “abc” happened). Beyond the bits used for communicating they cannot exchange other information. Let’s now assume a number of different scenarios.\n\n1.1 A fair coin flip\nAssume person A does a fair coin flip where the probability distribution of having heads is the same as having tails, each being 50 percent: \\(P(H)=0.5\\) and \\(P(T)=0.5\\)\nBoth A and B can agree to exchange the outcome of the coin flip using a single bit of information where 0 means heads and 1 means tails. When B receives the bit, he will know exactly what the outcome of the coin flip was. We can say the entropy of this probability distribution is 1 bit.\n\n\n1.2 Winning team out of 8\nAssume on the one side of the wall person A observes one team out of 8 winning a tournament. Each team has a probability of 1/8 or 0.125 of winning, so this is again an equal probability distribution: \\(P(A)=0.125\\), \\(P(B)=0.125\\), \\(P(C)=0.125\\), …, \\(P(H)=0.125\\)\nA and B can agree to communicate the winning team using 3 bits of information. 3 bits give them \\(2^3=8\\) classes, one for each team. Let’s say “000” means team A; “001” team B; “010” team C and so on. We can say the entropy for this probability distribution is 3 bits.\nIf we generalize this: for a uniform distribution of M equally possible outcomes, the entropy is: \\(log_2\\,M\\)\nThis also holds for distributions where the number of outcomes is not exactly a power of 2, like was the case in the examples before. Let’s have a look at this in the next example.\n\n\n1.3 10 outcomes\nIf A observes an outcome out of equal distributation of 10 possible outcomes (each with a probability of 0.1), then these can all be encoded using 4 bits. 4 bits allows for representing \\(2^4=16\\) states which is more than needed for our 10 possible outcomes. There are 6 “unused” states.\nWe can group outcomes in groups of 3. There are 1000 possible outcomes (3 observations, each 10 possible outcomes is \\(10*10*10\\) ). If we encode our data per 3 observations, then every such triplet can be encoded using 10 bits, giving us a total of \\(2^10=1024\\) states, just a bit more than we need to encoce our 1000 possibilities. That’s still too much but we’re already much more efficient in encoding out information as we can represent on average 1 outcome = 1/3 triplet using \\(\\frac{10}{3}=3.333...\\) bits. This is better but not perfect yet.\nWe grouped our information by 3 outcomes at a time; which gave us \\(10^3\\) outcomes. Let’s call the number of items by which we group is G instead of 3. The number of states we can present with B bits is \\(2^B\\). The most efficient encoding is one where \\(2^B = 10^G\\) where G is the number of grouped observations and B is the number of bits.\n\\[2^B = 10^G\\]\nLet’s take the \\(log_2\\) of both sides:\n\\[B = log_2 (10^G)\\] \\[B = G\\, log_2 10\\] \\[\\frac{B}{G} = log_2 10\\]\n\\(\\frac{B}{G}\\) is our entropy and \\(log_2 10\\) is approximately 3.322…\nSo for a uniform distribution of M possible outcomes (\\(U(M)\\)) in which every probability of an outcome is \\(p_{1..M} = \\frac{1}{M}\\), the entropy is: \\[H(U(M))=log_2\\,M\\]\n\n\n1.4 Non-uniform distributions\nAs we’ve seen before, each outcome with probability \\(p\\) needs \\(log_2\\,M\\) bits to encode or \\(log_2\\,\\frac{1}{p}\\) which is \\(-log_2\\,p\\). Summing this over an entire distribution and multiplying each possible outcome with its probability gives us the entropy for a non-uniform distribution: \\(-\\sum_{i=1}^{M}\\,p_{i}\\,log_2\\,p_{i}\\)\nThis describes how much information, on average, is needed to describe the outcome for a distribution.\n\n\n1.5 Shannon Entropy Formula\nShannon Entropy is defined as: \\[H=-\\sum_{i=1}^{M}P(x_{i}) \\, log_2 \\, P(x_{i})\\]",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#kl-divergence",
    "href": "theory/cross-entropy-loss.html#kl-divergence",
    "title": "Cross-Entropy Loss",
    "section": "2 KL Divergence",
    "text": "2 KL Divergence\nThe Kullback Leibler divergence is a natural measure of distance between distributions, or how much one distribution differs from another one.\n\n2.1 Comparing distributions\nEntropy is the theoretical lower bound on the number of bits we need to to encode information, given a probability distribution.\nAssume two different probability distributions \\(P\\) and \\(Q\\). The most optimal encoding for \\(P\\) is given by its entropy \\(H(P)\\). Any other encoding will need more bits to convey the same events or observations. How many more bits would we need to encode information using the most optimal encoding for distribution Q, given information coming from distribution P?\nIn P, a single event or observation \\(x_{i}\\) with probability \\(p(x_{i})\\) needs \\(-log \\, p(x_{i})\\) bits to be encoded. That same event has a different probability in distribution Q and needs \\(-log \\, q(x_{i})\\) bits to be encoded in the optimal encoding for Q. The difference between the encoding for the same event in both distributions is: \\(-log \\, q(x_{i})-(-log \\, p(x_{i}))\\) or: \\[log \\, p(x_{i})-log \\, q(x_{i})\\]\nThe above equation tells us the “excess bits” for a single event \\(x_{i}\\) when encoded in Q instead of in P. To look at the average difference in number of bits across the entire distribution \\(P\\), we can multiply each event by its probably of occuring in P. This is what we call the KL divergence:\n\\[D_{KL}(p||q)=\\sum_{i=1}^N p(x_{i})\\,(log \\, p(x_{i})-log \\, q(x_{i}))\\]\nor given that \\(log \\, a - log \\, b = log \\,\\frac{a}{b}\\):\n\\[D_{KL}(p||q)=\\sum_{i=1}^N p(x_{i})\\,(log \\, \\frac{p(x_{i})}{q(x_{i})})\\]\n\n\n2.2 KL Divergence Formula\nThe KL Divergence is defined as: \\[D_{KL}(P||Q)=\\sum_{i}P_{i}\\,log \\frac{P_{i}}{Q_{i}}\\]\n\n\n2.3 Further intuition\nImagine we have 2 coins: one fair coin with an equal distribution of 0.5 for each outcome (heads or tails) and a biased coin with probability \\(p\\) for heads and \\(q\\) for tails. We’re trying to measure how different those are. If \\(p\\) is close to 0.5 then it would be easy to confuse both distributions by looking at the outcomes they generate. On the opposite side, if \\(p\\) is close to 0.95 for example, then it would be fairly obvious to dinstinguish between both distributions by observing a series of outcomes.\nTo quantitatively measure the difference between two distributions we can look if a given sequence would be equally probably in both. If they assign similar probabilities to similar sequences that implies both are very similar.\nWe can generate observations using coin 1 then calculating the probability of coin 2 generating the observations. Then we can compare that probability to the probability of coin 1. If those are similar, then the distribution is similar or vice versa. We could then take the following ratio: \\[\\frac{P_{\\text{observations from coin 1}}}{P_{\\text{observations from coin 2}}}\\]\nLet’s say our fair coin has probabilities: \\[\\begin{cases}p_{1} & \\text{for heads} \\\\ p_{2} & \\text{for tails} \\end{cases}\\]\nWe flip this coin \\(n\\) times: H T T H H\nThen we work out the probability of coin 1 generating this sequence. To do this we multiply by \\(p_{1}\\) when we see heads and by \\(p_{2}\\) when we see tails: \\(p_{1} \\cdot p_{2} \\cdot p_{2} \\cdot p_{1} \\cdot p_{1}\\)\nOur biased coin has probabilities: \\[\\begin{cases}q_{1} & \\text{for heads} \\\\ q_{2} & \\text{for tails} \\end{cases}\\]\nLet’s work out the probably of coin 2 generating this sequence. In a similar way this is: \\(q_{1} \\cdot q_{2} \\cdot q_{2} \\cdot q_{1} \\cdot q_{1}\\)\nIf \\(N_{H}\\) is the number of times we got heads and \\(N_{T}\\) is the number of times we got tails, we can simplify both as: \\[P(\\text{observations from coin 1})=p_{1}^{N_{H}}\\cdot p_{2}^{N_{T}}\\] and in the biased distribution: \\[P(\\text{observations from coin 2})=q_{1}^{N_{H}}\\cdot q_{2}^{N_{T}}\\]\nCalculating the ratio of both:\n\\[\\frac{P_{\\text{observations from coin 1}}}{P_{\\text{observations from coin 2}}}=\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\]\nLet’s normalize this for sample size by raising this to the power of \\(\\frac{1}{N}\\): \\[\\left(\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\right)^{\\frac{1}{N}}\\]\nNow let’s take the log of this expression:\n\\[log \\left(\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\right)^{\\frac{1}{N}}\\] \\[=\\frac{1}{N} log \\left(\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\right)\\] \\[=\\frac{1}{N} \\left( log\\,p_{1}^{N_{H}} + log\\,p_{2}^{N_{T}} - log\\,q_{1}^{N_{H}} -  log\\,q_{2}^{N_{T}} \\right)\\] \\[=\\frac{1}{N}log\\,p_{1}^{N_{H}} + \\frac{1}{N}log\\,p_{2}^{N_{T}} - \\frac{1}{N}log\\,q_{1}^{N_{H}} - \\frac{1}{N}log\\,q_{2}^{N_{T}}\\] \\[=\\frac{N_{H}}{N}log\\,p_{1} + \\frac{N_{T}}{N}log\\,p_{2} - \\frac{N_{H}}{N}log\\,q_{1} - \\frac{N_{T}}{N}log\\,q_{2}\\] \\[=p_{1}log\\,p_{1} + p_{2}log\\,p_{2} - p_{1}log\\,q_{1} - p_{2}log\\,q_{2}\\] \\[=p_{1}log\\,p_{1} - p_{1}log\\,q_{1} + p_{2}log\\,p_{2} - p_{2}log\\,q_{2}\\] \\[=p_{1}log\\frac{p_{1}}{q_{1}} + p_{2}log\\frac{p_{2}}{q_{2}}\\]\nNote how this formula is the formula for KL divergence.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#cross-entropy-loss",
    "href": "theory/cross-entropy-loss.html#cross-entropy-loss",
    "title": "Cross-Entropy Loss",
    "section": "3 Cross-Entropy Loss",
    "text": "3 Cross-Entropy Loss\nThe output for a neural network doing a classification task is an entire probability distribution \\(P\\). Also the ground truth can be considered to be a probability distribution \\(P^{*}\\): one where the true class has a probability of 1 and the other categories have a probability of 0. The goal is for the network to learn and bring \\(P\\) as close as possible to \\(P^{*}\\).\nAs discussed before, one measure of distance between two probability distributions is the KL Divergence: \\(D_{KL}(P||Q)=\\sum_{i}P_{i}\\,log \\frac{P_{i}}{Q_{i}}\\). An intuitive loss function would try to minimize the distance between the predicted distribution and the true distribution:\n\\[D_{KL}(P^{*}||P)=\\sum_{y}P^{*}(y)\\,log \\frac{P^{*}(y)}{P(y)}\\] \\[=\\sum_{y}P^{*}(y)\\,\\left (log\\,P^{*}(y) - log\\,P(y) \\right )\\] \\[=\\sum_{y}P^{*}(y)\\,log\\,P^{*}(y) - \\sum_{y}P^{*}(y)\\,log\\,P(y)\\]\nNote how the first part (summation) of this equation is not dependent on our weights or parameters of the model. So if we want our loss function to minimize this expression, it should minimize the second part, which is dependent on our weight values. That second part is our Cross-Entropy Loss formula. Minimizing the Cross-Entropy Loss is the same as minimizing the KL divergence.\nIt is important that our probabilities add up to 1. To do this, a softmax function is typically used to normalize our output values of the network, turning them into probabilities on which we can use Cross-Entropy Loss:\nTODO",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#formula",
    "href": "theory/cross-entropy-loss.html#formula",
    "title": "Cross-Entropy Loss",
    "section": "4 Formula",
    "text": "4 Formula\nHere’s the general formula for Cross-Entropy Loss:\n\\[H(P^{*}|P)=-\\sum_{y}\\,P^{*}(y)\\,log\\,P(y)\\]\n\\(P\\) is the predicted class distribution and \\(P^{*}\\) is the true class distribution.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#single-label-classification",
    "href": "theory/cross-entropy-loss.html#single-label-classification",
    "title": "Cross-Entropy Loss",
    "section": "5 Single-label Classification",
    "text": "5 Single-label Classification\nThe above formula for Cross-Entropy Loss can be further simplified, given that often we have a classification problem which predicts just a single label out of a range of labels. The true label in the true class distribution has a probability of 1 while all other labels have a probability of 0. If we look at our loss in this particular case then:\n\\[\\text{loss } L = -\\sum_{y}\\,P^{*}(y)\\,log\\,P(y)\\] \\[=-[P^{*}(y_{1}) log P(y_{1}) + P^{*}(y_{2}) log P(y_{2}) + P^{*}(y_{true}) log P(y_{true}) + P^{*}(y_{n}) log P(y_{n})]\\]\nIn this, y iterates over the probability for every class. Out of all these for only one, the ground thruth will be 1 while for all others y is 0: \\(P^{*}(y_{1}) = 0\\) and \\(P^{*}(y_{true}) = 1\\) Because of this, we can simplify the formula to:\n\\[L = - log \\, P(y_{true})\\]\n\n\n\n\n\n\n\n\n\nIf the prediction for the true class is 1, the loss is 0. If the prediction for the true class is closer to 0, the negative log raises up to infinity. Note how small errors towards the 1-side are punished less then errors on the 0-side.\n\n\n\n\n\n\nNote\n\n\n\nNote how the derived formulas are applicable to calculate the loss for a single image input. In reality we’ll have many more inputs and we’ll take the average loss over a batch of inputs. The loss for each item in the batch is \\(-log\\,P(y_{true})\\) - so: the negative log of the predicted probability of the true class.\n\n\nThis observation is interesting, as the Cross-Entropy loss in this situation onliy looks at the loss on the predicted score for the true-label; ignoring all the rest. Intuitively this makes sense however: the more weight and the closer the predicted probability for the true class is to 1, the less probability there’s left for all other classes.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#multi-label-classification",
    "href": "theory/cross-entropy-loss.html#multi-label-classification",
    "title": "Cross-Entropy Loss",
    "section": "6 Multi-label Classification",
    "text": "6 Multi-label Classification\nMulti-label classification is where we want to recognize more than a single label in a picture. (“There’s both a panda and a giraffe to be seen.”) Target and prediction vectors in this case are not probabilities and the target is represented as a “one-hot” vector. This vector has 1 for every class that appears in the picture and 0 for all other classes.\nCross-Entropy Loss cannot be used for these one-hot vectors as these do not represent probabilities. (The sum for all items in such vector can be more than one.) We can look at this problem however as a multiple single-label classification subtasks. For every label we calculate the cross-entropy loss: for “cat” that is 0.34, for “dog” that is 0.56, for “panda” that is 1.2. The total loss is now just the sum of all the losses for every label: 0.34 + 0.56 + 1.2 = 2.1",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#references",
    "href": "theory/cross-entropy-loss.html#references",
    "title": "Cross-Entropy Loss",
    "section": "7 References",
    "text": "7 References\n\n7.1 Articles\n\nMachineLearningMastery - Cross Entropy for Machine Learning\nTowardsDataScience - Cross Entropy for Dummies\nTowardsDataScience - Cross Entropy for Classification\nKL divergence explained\n\n\n\n7.2 Videos\n\nIntuitively understanding Shannon Entropy\nIntuitively Understanding the KL Divergence\nIntuitively Understanding the Cross Entropy Loss",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TinyLM - Language Model Learnings",
    "section": "",
    "text": "This site contains my journey learning about language models, from tokenization to implementation.\n\n\n\nTokenizing - Understanding how text becomes tokens\n\nNavigate using the sidebar to explore different topics.",
    "crumbs": [
      "Getting Started",
      "Home"
    ]
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "TinyLM - Language Model Learnings",
    "section": "",
    "text": "Tokenizing - Understanding how text becomes tokens\n\nNavigate using the sidebar to explore different topics.",
    "crumbs": [
      "Getting Started",
      "Home"
    ]
  },
  {
    "objectID": "notebooks/02-Attention.html",
    "href": "notebooks/02-Attention.html",
    "title": "Attention mechanics",
    "section": "",
    "text": "In the previous notebook we prepared and massaged our text into input vectors that encode both tokens as well as their positions. It’s these input vectors that will be handled by the rest of the model.",
    "crumbs": [
      "Notebooks",
      "Attention"
    ]
  },
  {
    "objectID": "notebooks/02-Attention.html#simplified-self-attention",
    "href": "notebooks/02-Attention.html#simplified-self-attention",
    "title": "Attention mechanics",
    "section": "1.1 Simplified Self-Attention",
    "text": "1.1 Simplified Self-Attention\nLet’s take a simple sentence: “I am learning this”\nThis is our input sequencen let’s call it \\(x\\) with 4 tokens: \\(x^{(1)}\\), \\(x^{(2)}\\), \\(x^{(3)}\\) and \\(x^{(4)}\\).\nIn general if our context length is \\(T\\) then we have \\(x^{(1)} \\ldots x^{(T)}\\)\nEach \\(x^{(i)}\\) is a \\(d\\)-dimensional embedding vector representing a token.\nNow we will calculate a context vector \\(z^{i}\\) for each \\(x^{i}\\). This vector will contain information from all vectors \\(x^{(1)} \\ldots x^{(T)}\\)",
    "crumbs": [
      "Notebooks",
      "Attention"
    ]
  }
]