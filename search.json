[
  {
    "objectID": "theory/softmax.html",
    "href": "theory/softmax.html",
    "title": "Softmax",
    "section": "",
    "text": "1 What is Softmax?\nSoftmax is a transformation, when applied to range of logits (the outputs of a neural network layer), turns their real values into probabilities that:\n\ntogether sum up to one\neach sit between \\(0\\ldots 1\\)\n\nOften, for classification tasks, it will be used as the final output layer of a neural network.\nImagine outputs \\(x_{1}\\), \\(x_{2}\\), …\nThe softmax for one of these numbers \\(x_{i}\\) is: \\[s(x_{i}) = \\frac{e^{x_{i}}}{ \\sum_{j=1}^{n} e^{x_{j} }}\\]\nLook at the function \\(e^{x}\\) plotted out:\n\n\n\n\n\n\n\n\n\nOberve that this function maps x from \\(-\\infty\\) to \\(+\\infty\\) to a range between \\(0\\ldots1\\). It also “encourages” large values proportionally more than small values.\n\n\n2 Relation to Cross-Entropy Loss\nRecall the formula for Cross-Entropy Loss, as outlined in Cross-Entropy Loss:\n\\[\\mathcal{L} = -\\sum_{c=1}^{M} y_c \\log(p_c)\\] where:\n\n\\(M\\) is the number of categories\n\\(y_c\\) is the ground truth (one-hot)\n\\(p_c\\) is the predicated probability for class c (after applying softmax)\n\n\\[\\mathcal{L} = -[ y_1 log(p_1) + y_2 log(p_2) + ... + y_M log(p_M) ] \\]\nhowever, for only one single category the ground truth \\(y_{\\text{true}}\\) will be \\(1\\) for all the others, the ground truth \\(y_i\\) will be \\(0\\). This means we can further simplify this to:\n\\[\\mathcal{L} =  -[ y_{\\text{true}} log(p_\\text{true})] \\]",
    "crumbs": [
      "Theory",
      "Softmax Function"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TinyLM - Language Model Learnings",
    "section": "",
    "text": "This site contains my journey learning about language models, from tokenization to implementation.\n\n\n\nTokenizing - Understanding how text becomes tokens\n\nNavigate using the sidebar to explore different topics.",
    "crumbs": [
      "Getting Started",
      "Home"
    ]
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "TinyLM - Language Model Learnings",
    "section": "",
    "text": "Tokenizing - Understanding how text becomes tokens\n\nNavigate using the sidebar to explore different topics.",
    "crumbs": [
      "Getting Started",
      "Home"
    ]
  },
  {
    "objectID": "notebooks/01-Tokenizing.html",
    "href": "notebooks/01-Tokenizing.html",
    "title": "Tokenization",
    "section": "",
    "text": "1 Tokenizing text\nWe’ll use an of-the-shelve tokenizer for doing Byte Pair Encoding (BPE). We’ll use tiktoken for this.\n\n%conda install -y tiktoken\n\nLet’s load a text and tokenize it:\n\nimport tiktoken\n\nfilepath = '../data/dracula.txt'\n\ndef load_text(path):\n    with open(path, 'r') as f:\n        raw_text = f.read()\n    return raw_text\n\ndef tokens_from_text(text: str):\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n    integers = tokenizer.encode(text)\n    return integers\n\ndef text_from_tokens(tokens: list[int]):\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n    text = tokenizer.decode(tokens)\n    return text\n\nThis now allows us to load text and turn it into tokens (each identified by an integer) or the reverse: given a set of tokens, reconstruct the text from them:\n\ndef get_sample_text(num_chars:int = 40):\n    raw_text = load_text(filepath)\n    return raw_text[:num_chars]\n\nsample_text = get_sample_text()\nprint(sample_text)\n\ntokens = tokens_from_text(sample_text)\nprint(tokens)\n\ntext = text_from_tokens(tokens)\nprint(text)\n\nThe Project Gutenberg eBook of Dracula\n \n[464, 4935, 20336, 46566, 286, 41142, 198, 220]\nThe Project Gutenberg eBook of Dracula\n \n\n\n\n\n2 Creating a dataset\nWe’ll first make sure to install pytorch: conda install pytorch cpuonly -c pytorch.\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n\nclass MyDataset(Dataset):\n    def __init__(self, txt: str, tokenizer, max_length=16, stride=4):\n        \"\"\"\n        Args:\n            txt (str): The input text to tokenize and split into sequences.\n            tokenizer: The tokenizer used to encode the text into token ids.\n            max_length (int): The context length, i.e., the number of tokens in each input sequence.\n            stride (int): The step size between the start of consecutive sequences.\n        \"\"\"\n        self.tokenizer = tokenizer\n        self.max_length = max_length  # context length for each input sequence\n        self.stride = stride\n        self.token_ids = self.tokenizer.encode(txt)\n        self.length = len(self.token_ids)\n\n        self.input_ids = []    # list of input tokens, our \"context\" as input to the LLM\n        self.target_ids = []   # list of target tokens that will need to be predicted, our \"context\" shifted by stride\n\n        for i in range(0, len(self.token_ids) - self.max_length):\n            input_chunk = self.token_ids[i:i + self.max_length]\n            target_chunk = self.token_ids[i + 1:i + self.max_length + 1]\n            self.input_ids.append(torch.tensor(input_chunk))\n            self.target_ids.append(torch.tensor(target_chunk))\n\n    def __len__(self):\n        return len(self.input_ids)\n    \n    def __getitem__(self, idx):\n        return self.input_ids[idx], self.target_ids[idx]\n    \ndef create_dataloader(txt:str, batch_size=4, max_length=256, stride=128, shuffle=True, drop_last=True,num_workers=0):\n    \"\"\"\n    Create a DataLoader for the given text.\n    Args:\n        txt (str): The input text to tokenize and split into sequences.\n        batch_size (int): Number of samples per batch.\n        max_length (int): The context length, i.e., the number of tokens in each input sequence.\n        stride (int): The step size between the start of consecutive sequences.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n        drop_last (bool): Whether to drop the last incomplete batch.\n        num_workers (int): Number of subprocesses to use for data loading.\n    \"\"\"\n\n    tokenizer = tiktoken.get_encoding(\"gpt2\")\n    dataset = MyDataset(txt, tokenizer, max_length=max_length, stride=stride)\n    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=shuffle, drop_last=drop_last, num_workers=num_workers)\n    return dataloader\n\nLet’s test our dataloader now:\n\ntext = get_sample_text(300)\nprint(\"sample_text: \", text)\nprint(\"======\")\ndataloader = create_dataloader(txt=text, batch_size=2, max_length=8, stride=2, drop_last=False)\nfor batch in dataloader:\n    input_ids, target_ids = batch\n    print(\"Input IDs first batch: \\n\", input_ids)\n    print(\"Target IDs first batch: \\n\", target_ids)\n    break  # Just show the first batch\nprint(\"Total batches:\", len(dataloader))\nprint(\"Batch size:\", dataloader.batch_size)\nprint(\"Number of workers:\", dataloader.num_workers)\n\nsample_text:  The Project Gutenberg eBook of Dracula\n    \nThis ebook is for the use of anyone anywhere in the United States and\nmost other parts of the world at no cost and with almost no restrictions\nwhatsoever. You may copy it, give it away or re-use it under the terms\nof the Project Gutenberg License included \n======\nInput IDs first batch: \n tensor([[41142,   198,   220,   220,   220,   220,   198,  1212],\n        [  220,   220,   220,   198,  1212, 47179,   318,   329]])\nTarget IDs first batch: \n tensor([[  198,   220,   220,   220,   220,   198,  1212, 47179],\n        [  220,   220,   198,  1212, 47179,   318,   329,   262]])\nTotal batches: 31\nBatch size: 2\nNumber of workers: 0\n\n\n\n\n3 From token IDs to Embeddings\nWe now need to translate our token IDs to multi-dimensional vectors that can be used as input for our neural network. What we have here: - nr_batches: the count of batches - batch_size: the number of samples in each batch, before we’ll update our weights - max_length: the length of our context window: how many tokens there are in every sample, to predict the next token from - vocab_size: the size of our vocabulary (which in the case of tiktoken “gpt2” tokenizer is 50,257 tokens) - embedding_dim: the length of each embedding vector, representing a single token (12,288 for GPT-3 for example)\nLet’s work through a simple example first, assuming a single sample, four token input:\n\ntorch.manual_seed(42)                                           # For reproducibility\ninput_ids = torch.tensor([3, 5, 1, 4 ])                         # Example input tensor, four tokens\n\nvocab_size = 6                                                  # Size of the vocabulary, here 6 tokens\nembedding_dim = 8                                               # Size of the embedding vector for each token, here 8 floats\nembedding_layer = torch.nn.Embedding(vocab_size, embedding_dim)       # Create the embedding layer\n\nprint(embedding_layer.weight)\nprint(\"embedding_layer shape:\", embedding_layer.weight.shape)   # Shape of the embedding matrix\n\nParameter containing:\ntensor([[ 1.9269,  1.4873,  0.9007, -2.1055,  0.6784, -1.2345, -0.0431, -1.6047],\n        [-0.7521,  1.6487, -0.3925, -1.4036, -0.7279, -0.5594, -0.7688,  0.7624],\n        [ 1.6423, -0.1596, -0.4974,  0.4396, -0.7581,  1.0783,  0.8008,  1.6806],\n        [ 1.2791,  1.2964,  0.6105,  1.3347, -0.2316,  0.0418, -0.2516,  0.8599],\n        [-1.3847, -0.8712, -0.2234,  1.7174,  0.3189, -0.4245,  0.3057, -0.7746],\n        [-1.5576,  0.9956, -0.8798, -0.6011, -1.2742,  2.1228, -1.2347, -0.4879]],\n       requires_grad=True)\nembedding_layer shape: torch.Size([6, 8])\n\n\nThis is our embedding layer, having for every of the 6 tokens in the vocabulary, a vector of 8 floats representing that token. nn.Embedding. This module is a lookup table that stores embeddings of a fixed dictionary and size. When you pass a tensor of token IDs to it, it returns the corresponding embedding vectors for each token. This is commonly used in NLP models to convert token IDs into dense vector representations that can be processed by neural networks.\nLearn more in the PyTorch documentation for nn.Embedding.\n\n# lookup the embeddings for the input tokens\nembeddings = embedding_layer(input_ids)                        # Shape: (4, 8), 4 tokens, each with an 8-dimensional vector\nprint(\"input_ids:\\n\", input_ids)\nprint(\"embedding layer:\\n\", embedding_layer.weight)\nprint(\"embedding layer shape:\\n\", embedding_layer.weight.shape)\nprint(\"embeddings shape:\\n\", embeddings.shape)\nprint(\"embeddings:\\n\", embeddings)\n\ninput_ids:\n tensor([3, 5, 1, 4])\nembedding layer:\n Parameter containing:\ntensor([[ 1.9269,  1.4873,  0.9007, -2.1055,  0.6784, -1.2345, -0.0431, -1.6047],\n        [-0.7521,  1.6487, -0.3925, -1.4036, -0.7279, -0.5594, -0.7688,  0.7624],\n        [ 1.6423, -0.1596, -0.4974,  0.4396, -0.7581,  1.0783,  0.8008,  1.6806],\n        [ 1.2791,  1.2964,  0.6105,  1.3347, -0.2316,  0.0418, -0.2516,  0.8599],\n        [-1.3847, -0.8712, -0.2234,  1.7174,  0.3189, -0.4245,  0.3057, -0.7746],\n        [-1.5576,  0.9956, -0.8798, -0.6011, -1.2742,  2.1228, -1.2347, -0.4879]],\n       requires_grad=True)\nembedding layer shape:\n torch.Size([6, 8])\nembeddings shape:\n torch.Size([4, 8])\nembeddings:\n tensor([[ 1.2791,  1.2964,  0.6105,  1.3347, -0.2316,  0.0418, -0.2516,  0.8599],\n        [-1.5576,  0.9956, -0.8798, -0.6011, -1.2742,  2.1228, -1.2347, -0.4879],\n        [-0.7521,  1.6487, -0.3925, -1.4036, -0.7279, -0.5594, -0.7688,  0.7624],\n        [-1.3847, -0.8712, -0.2234,  1.7174,  0.3189, -0.4245,  0.3057, -0.7746]],\n       grad_fn=&lt;EmbeddingBackward0&gt;)\n\n\n\n\n4 Adding positional information\nOne downside of the self-attention mechanics that we’ll work with later is that there’s no positional information to the tokens. It all looks the same to the neural net as we have it for now; it won’t distinguish between the order of words/tokens in our input. We’ll address this by creating another layer of embeddings, our positional embeddings with dimension [max_length, embedding_dim].\nFor each position embedding, we’ll chose the same length as our embedding_dim, so that we can add each of the respective positional vector to each of the corresponding token embedding vector.\nSo in terms of dimensions, we have: - [max_length, embedding dim] as our single sample input embedding vector. - [max_length, embedding dim] as our position embedding vector\nIt’s those two we’ll add together to form our input to the LLM.\nLet’s start from our batch again, using somewhat more realistic sizes and dimensions:\n\ncontext_length = 4          # Maximum length of the input sequences\nvocab_size = 50257          # Size of the vocabulary for GPT-2\nembedding_dim = 256         # Let's say we want 256-dimensional embeddings\n\nembedding_layer = torch.nn.Embedding(vocab_size, embedding_dim)\n\ndataloader = create_dataloader(txt=text, batch_size=2, max_length=context_length, stride=2, drop_last=True)\ndata_iter = iter(dataloader)\ninputs, targets = next(data_iter)\n\nprint(\"First batch of inputs and targets:\")\nprint(\"Inputs shape:\", inputs.shape)            # Shape: (batch_size, max_length)\nprint(\"Targets shape:\", targets.shape)          # Shape: (batch_size, max_length)\n\n# Get the embeddings for the input tokens\nembeddings = embedding_layer(inputs)            # Shape: (batch_size, max_length, embedding_dim)\nprint(\"Embeddings shape:\", embeddings.shape)    # Shape: (batch_size, max_length, embedding_dim)\n\n# Get the embedding layer for the positions\npos_embedding_layer = torch.nn.Embedding(context_length, embedding_dim)\npos_embeddings = pos_embedding_layer(torch.arange(context_length))  # Shape: (context_length, embedding_dim)\nprint(\"Position embeddings shape:\", pos_embeddings.shape)           # Shape: (context_length, embedding_dim)\n\n# Combine input embeddings and position embeddings\ncombined_embeddings = embeddings + pos_embeddings                   # Shape: (batch_size, max_length, embedding_dim)\nprint(\"Combined embeddings shape:\", combined_embeddings.shape)  # Shape: (batch_size, max_length, embedding_dim)\n\nFirst batch of inputs and targets:\nInputs shape: torch.Size([2, 4])\nTargets shape: torch.Size([2, 4])\nEmbeddings shape: torch.Size([2, 4, 256])\nPosition embeddings shape: torch.Size([4, 256])\nCombined embeddings shape: torch.Size([2, 4, 256])\n\n\nThis means that in our first batch we have: - 2 samples - each 4 tokens - each represented by an embedding vector of 256",
    "crumbs": [
      "Notebooks",
      "Tokenization"
    ]
  },
  {
    "objectID": "notebooks/02-Attention.html",
    "href": "notebooks/02-Attention.html",
    "title": "Attention mechanics",
    "section": "",
    "text": "In the previous notebook we prepared and massaged our text into input vectors that encode both tokens as well as their positions. It’s these input vectors that will be handled by the rest of the model.",
    "crumbs": [
      "Notebooks",
      "Attention"
    ]
  },
  {
    "objectID": "notebooks/02-Attention.html#simplified-self-attention",
    "href": "notebooks/02-Attention.html#simplified-self-attention",
    "title": "Attention mechanics",
    "section": "1.1 Simplified Self-Attention",
    "text": "1.1 Simplified Self-Attention\nLet’s take a simple sentence: “I am learning this”\nThis is our input sequencen let’s call it \\(x\\) with 4 tokens: \\(x^{(1)}\\), \\(x^{(2)}\\), \\(x^{(3)}\\) and \\(x^{(4)}\\).\nIn general if our context length is \\(T\\) then we have \\(x^{(1)} \\ldots x^{(T)}\\)\nEach \\(x^{(i)}\\) is a \\(d\\)-dimensional embedding vector representing a token.\nNow we will calculate a context vector \\(z^{i}\\) for each \\(x^{i}\\). This vector will contain information from all vectors \\(x^{(1)} \\ldots x^{(T)}\\)\n\n1.1.1 Attention scores\nSo, for example, for \\(x^{(3)}\\) we’ll calculate a context vector \\(z^{(3)}\\). We’ll call \\(x^{(3)}\\) our “query” vector and for this query we’ll calculate an attention score for each of the tokens in our sentence: for example \\(w_{31}\\) for the attention score between our query (the 3rd token) and the first token. In this way we’ll have: \\(w_{31}\\), \\(w_{32}\\), \\(w_{33}\\) and \\(w_{34}\\)\nThe attention score \\(w_{31}\\) is the dot product from the third token with the first token. So if: \\[ x^{(3)} = [0.2,0.7,0.9] \\text{  (representing the token \"learning\")} \\] \\[ x^{(1)} = [0.8,0.9,0.3] \\text{  (representing the token \"I\")} \\]\nThen:\n\\[w_{(31)} = x^{(3)} \\cdot x^{(1)} = [(.2*.8) + (.7*.9) + (.9 * .3)] = 1.06 \\]\nWe’ll do this between our query \\(x^{(3)}\\) and each of our \\(x^{(1)},x^{(2)},x^{(3)},x^{(4)}\\) which result in an attention vector \\(w_3 = [ w_{(31)},w_{(32)},w_{(33)},w_{(34)} ]\\)\nNow in python, using an input vector of our 4 tokens, each with an embedding dimension of 3:\n\n\ntensor([[0.8823, 0.9150, 0.3829],\n        [0.9593, 0.3904, 0.6009],\n        [0.2566, 0.7936, 0.9408],\n        [0.1332, 0.9346, 0.5936]])\n\n\nWe’ll calculate the attention vector for \\(x^{(3)}\\) as our query:\n\nquery = inputs[2]\nattention_score_for_x3 = torch.empty((4))\nfor i, xi in enumerate(inputs):\n    # Calculate the attention score for x3i\n    attention_score_for_x3[i] = torch.dot(xi, query)\n\nprint(attention_score_for_x3)\n\ntensor([1.3127, 1.1213, 1.5807, 1.3343])\n\n\n\n\n1.1.2 Normalizing\nNow that we’ve calculated the attention vector \\(w_3\\) for query \\(x^{(3)}\\), we have a vector with a number for every token. These numbers however are not normalized between \\(0\\) and \\(1\\), which is what we’d really like. For this, we’ll use Cross-Entropy Loss, which will make sure the numbers in our attention vector add up to one and each are between \\(0 \\ldots 1\\)\n\nattention_weights_for_x3 = torch.softmax(attention_score_for_x3, dim=0)\nprint(attention_weights_for_x3)\n\ntensor([0.2407, 0.1987, 0.3146, 0.2459])\n\n\n\n\n1.1.3 Context Vector\nSo now that we have our normalized attention weights for a single query \\(x^{(3)}\\) we can calculate the full context vector that corresponds to \\(x^{(3)}\\)\nOur attention weights from the previous step were: \\([.2, .1, .3, .2]\\) or more in general, a vector \\([\\alpha _{31}, \\alpha _{32}, \\alpha _{33}, \\alpha _{34}]\\)\nTo calculate the context vector for \\(x^{(3)}\\) we’ll take each \\(\\alpha _{3i}\\) and multiply that by \\(x^{(i)}\\). Then we’ll add up all those vectors.\n\nquery = inputs[2]\ncontext_vector_for_x3 = torch.zeros((query.shape)) # dimension of query (3 in this case)\n\nfor i, xi in enumerate(inputs):\n    context_vector_for_x3 += attention_weights_for_x3[i] * xi # z3\n\nprint(context_vector_for_x3)\n\ntensor([0.5165, 0.7774, 0.6536])\n\n\n\n\n1.1.4 All context vectors\nWhat we did so far is to look at how to calculate a single context vector \\(z^{(3)}\\), for a single token \\(x^{(3)}\\) in our input sequence. We’ll need to make this more scalable and figure out a way to calculate \\(z\\) for all tokens in our input sequence.\nThis means, what we have done for \\(x^{(3)}\\) we need to do for all inputs:\n\nattention_scores_manual = torch.empty((4, 4))  # for each query of the 4 inputs, calculate 4 attention scores\nfor i, query in enumerate(inputs):\n    for j, xi in enumerate(inputs):\n        attention_scores_manual[i][j] = torch.dot(query, xi)\n\nprint(\"attention scores:\")\nprint(attention_scores_manual)\nprint(\"for comparison, the attention scores for x3 as query:\")\nprint(attention_score_for_x3)\n\nattention scores:\ntensor([[1.7622, 1.4337, 1.3127, 1.1999],\n        [1.4337, 1.4338, 1.1213, 0.8494],\n        [1.3127, 1.1213, 1.5807, 1.3343],\n        [1.1999, 0.8494, 1.3343, 1.2435]])\nfor comparison, the attention scores for x3 as query:\ntensor([1.3127, 1.1213, 1.5807, 1.3343])\n\n\nUsing for loops however is slow and can’t be optimized using CUDA, so let’s find a way to do the same, but to use pure tensor calculations instead. Our inputs look like the below, with 4 tokens, each with a dimension of 3\n\n\ntensor([[0.8823, 0.9150, 0.3829],\n        [0.9593, 0.3904, 0.6009],\n        [0.2566, 0.7936, 0.9408],\n        [0.1332, 0.9346, 0.5936]])\n\n\nWe can transpose this vector, so it looks like:\n\n\ntensor([[0.8823, 0.9593, 0.2566, 0.1332],\n        [0.9150, 0.3904, 0.7936, 0.9346],\n        [0.3829, 0.6009, 0.9408, 0.5936]])\n\n\nIf we now take multiply these two matrices, we get:\n\nattention_scores = inputs @ inputs.T  # matrix multiplication\nprint(inputs @ inputs.T) # matrix multiplication\nprint(\"for comparison, the attention scores for x3 as query:\")\nprint(attention_score_for_x3)\n\ntensor([[1.7622, 1.4337, 1.3127, 1.1999],\n        [1.4337, 1.4338, 1.1213, 0.8494],\n        [1.3127, 1.1213, 1.5807, 1.3343],\n        [1.1999, 0.8494, 1.3343, 1.2435]])\nfor comparison, the attention scores for x3 as query:\ntensor([1.3127, 1.1213, 1.5807, 1.3343])\n\n\nThese are just attention scores, not yet attention weights, so lets normalize them:\n\nattention_weights = torch.softmax(attention_scores, dim=-1)  # normalize the attention scores\nprint(\"attention weights:\")\nprint(attention_weights)\nprint(\"for comparison, the attention weights for x3 as query:\")\nprint(attention_weights_for_x3)\n\nattention weights:\ntensor([[0.3415, 0.2459, 0.2179, 0.1946],\n        [0.3040, 0.3040, 0.2225, 0.1695],\n        [0.2407, 0.1987, 0.3146, 0.2459],\n        [0.2569, 0.1809, 0.2938, 0.2683]])\nfor comparison, the attention weights for x3 as query:\ntensor([0.2407, 0.1987, 0.3146, 0.2459])\n\n\nFrom here we can calculate our context vectors:\n\nall_context_vectors = attention_weights @ inputs  # matrix multiplication\nprint(\"context vectors for all inputs:\")\nprint(all_context_vectors)\nprint(\"for comparison, the context vector for x3:\")\nprint(context_vector_for_x3)\n\ncontext vectors for all inputs:\ntensor([[0.6191, 0.7634, 0.5991],\n        [0.6395, 0.7318, 0.6090],\n        [0.5165, 0.7774, 0.6536],\n        [0.5113, 0.7897, 0.6428]])\nfor comparison, the context vector for x3:\ntensor([0.5165, 0.7774, 0.6536])",
    "crumbs": [
      "Notebooks",
      "Attention"
    ]
  },
  {
    "objectID": "notebooks/02-Attention.html#self-attention-with-trainable-weights",
    "href": "notebooks/02-Attention.html#self-attention-with-trainable-weights",
    "title": "Attention mechanics",
    "section": "1.2 Self-Attention with trainable weights",
    "text": "1.2 Self-Attention with trainable weights\nFrom here we’ll expand to what is called “scaled dot-product attention”. Also here we’ll want to calculate context vectors (one for each of our input tokens) as a weighted sum over (some abstraction) of the inputs. There are some differences with what we’ve done so far though:\n\ninstead of taking directly \\(q^{(i)} = x^{(i)}\\) as the query vector, we’ll use a projection of \\(x^{(i)}\\). We do this using a trainable weight matrix \\(W_q\\), used to calculate our query\ninstead of taking directly the dot product of \\(q^{(i)}\\) and each \\(x^{(i)}\\) to calculate our attention scores and weights, we’ll do the dot product with a projection of \\(x^{(i)}\\). We do this using a trainable weight matrix \\(W_k\\), used to calculate our keys.\ninstead of calculating the weighted average using these scores with each \\(x^{(i)}\\), we’ll do this with a projection of \\(x^{(i)}\\). We do this using a trainable weight matrix \\(W_v\\), used to calculate our values.\n\nWe’ll have trainable weight matrixes: \\(W_q\\), \\(W_k\\), \\(W_v\\) so that the model, when trained can learn to use these to project respectively the query, key and value vectors.\n\n1.2.1 Single context vector (1)\nOur token embedding vectors are of a certain dimension embedding_dim = 3 in our example. We can choose to project these into another dimension, from 3 to 5 for example. (This is not usually done however, it’s likely kept the same.) For illustration purposes, let’s go with 5 here:\n\ntorch.manual_seed(42)  # for reproducibility\n\nd_in = embedding_dim\nd_out = 2\n\nW_query_1 = torch.rand((d_in, d_out))\nW_key_1 = torch.rand((d_in, d_out))\nW_value_1 = torch.rand((d_in, d_out))\n\nWe can now use \\(W_q\\), \\(W_k\\), \\(W_v\\) to project an embedding vector from it’s normal dimension into a dimension of 5. Let’s use \\(x^{(3)}\\) as an example for our query:\n\nx3 = inputs[2]\nprint(\"x3 input:\")\nprint(x3)\n\nprint(\"W_query:\")\nprint(W_query_1)\n\nquery = x3 @ W_query_1\nprint(\"projected query:\")\nprint(query)\n\nx3 input:\ntensor([0.2566, 0.7936, 0.9408])\nW_query:\ntensor([[0.8823, 0.9150],\n        [0.3829, 0.9593],\n        [0.3904, 0.6009]])\nprojected query:\ntensor([0.8975, 1.5614])\n\n\nInstead of defining our projection matrices like above, we’ll define them as pytorch parameters:\n\nW_query = torch.nn.Parameter(W_query_1, requires_grad=False)\nW_key = torch.nn.Parameter(W_key_1, requires_grad=False)\nW_value = torch.nn.Parameter(W_value_1, requires_grad=False)\n\nLet’s calculate our key and value vectors for every input token in our sentence “I am learning this”: \\(x^{(1)}\\): “I”, \\(x^{(2)}\\): “am”, \\(x^{(3)}\\): “learning”, \\(x^{(4)}\\): “this”,\n\nvalues = inputs @ W_value\nprint(\"values:\")\nprint(values)\nkeys = inputs @ W_key\nprint(\"keys:\")\nprint(keys)\n\nvalues:\ntensor([[1.7842, 1.1135],\n        [1.6554, 1.0571],\n        [1.6442, 1.0264],\n        [1.3340, 0.8176]])\nkeys:\ntensor([[1.4450, 1.0493],\n        [1.1750, 1.1700],\n        [1.6917, 0.8678],\n        [1.4682, 0.5825]])\n\n\nNow we can calculate the attention scores, for our query vector that got projected from \\(x^{(3)}\\)\n\n\nquery projection from x3:\ntensor([0.8975, 1.5614])\n\n\nThe attention score \\(w_{31}\\) is:\n\nx1 = inputs[0]\nprint(\"x1 input:\")\nprint(x1)\nprint(\"key projection from x1: \")\nkey = x1 @ W_key\nprint(key)\nprint(\"... which is the same as: \")\nprint(keys[0])  # keys[0] is the key for x1\n\nprint(\"attention score between our query and x1's projected key:\")\nattention_score_x3_x1 = query.dot(key)\nprint(attention_score_x3_x1)\n\nx1 input:\ntensor([0.8823, 0.9150, 0.3829])\nkey projection from x1: \ntensor([1.4450, 1.0493])\n... which is the same as: \ntensor([1.4450, 1.0493])\nattention score between our query and x1's projected key:\ntensor(2.9354)\n\n\nIn the same way as we got the attention score between the query and x1, we can get all attention scores for our query like this:\n\nattention_scores_x3_as_query = query @ keys.T\nprint(\"attention scores for x3 as query:\")\nprint(attention_scores_x3_as_query)\n\nattention scores for x3 as query:\ntensor([2.9354, 2.8816, 2.8733, 2.2273])\n\n\nAs is shown above, for our chosen query, we’ll end up with 4 attention scores: one for each input token. Like before, we’ll want to normalize our attention scores into attention weights but instead of doing a pure softmax function, we’ll first scale the attention scores by dividing them by the square root of the dimension of our projected keys (2 in this case).\n\nprint(\"dimension of our projected key: \", d_out)\nscaled_attention_weights_x3_as_query = \\\n  torch.softmax(attention_scores_x3_as_query / d_out**0.5, dim=-1)\nprint(\"scaled attention weights for x3 as query:\")\nprint(scaled_attention_weights_x3_as_query)\n\ndimension of our projected key:  2\nscaled attention weights for x3 as query:\ntensor([0.2836, 0.2730, 0.2714, 0.1719])\n\n\nWe don’t have our full context vector yet. For that we’ll still need to make a weighted combination of our projected value vectors. Before we do so, let’s digress a little on the need for scaling the softmax.\n\n\n1.2.2 Why scaling?\nAs the dimension for our projected key vector grows, the dot products can become large numbers. An example:\n\nkey_dim = 3\nprint(\"dimension of the key: \", key_dim)\nsmall_proj_key_dim = 2\nlarge_proj_key_dim = 64\n\ntest_token_embeddings = torch.rand((4, key_dim)) # 4 tokens, each with key_dim features\nprint(\"test token embeddings for 4 token:\")\nprint(test_token_embeddings)\n\ntest_query  = test_token_embeddings[2]  # let's take the 3rd token as query\nprint(\"test query:\")\nprint(test_query)\n\nW_k_for_small_output_dim = torch.rand(key_dim, small_proj_key_dim)\nW_q_for_small_output_dim = torch.rand(key_dim, small_proj_key_dim)\nW_k_for_large_output_dim = torch.rand(key_dim, large_proj_key_dim)\nW_q_for_large_output_dim = torch.rand(key_dim, large_proj_key_dim)\n\nprojected_small_keys = test_token_embeddings @ W_k_for_small_output_dim\nprojected_small_query = test_query @ W_q_for_small_output_dim\nprojected_large_keys = test_token_embeddings @ W_k_for_large_output_dim\nprojected_large_query = test_query @ W_q_for_large_output_dim\n\nprint(\"projected small query:\")\nprint(projected_small_query)\nprint(\"projected small keys:\")\nprint(projected_small_keys)\nprint(\"projected large query:\")\nprint(projected_large_query)\nprint(\"projected large keys:\")\nprint(projected_large_keys)\n\ndimension of the key:  3\ntest token embeddings for 4 token:\ntensor([[0.2666, 0.6274, 0.2696],\n        [0.4414, 0.2969, 0.8317],\n        [0.1053, 0.2695, 0.3588],\n        [0.1994, 0.5472, 0.0062]])\ntest query:\ntensor([0.1053, 0.2695, 0.3588])\nprojected small query:\ntensor([0.4380, 0.3182])\nprojected small keys:\ntensor([[0.9006, 0.6041],\n        [0.9639, 0.8792],\n        [0.4601, 0.4554],\n        [0.6766, 0.3391]])\nprojected large query:\ntensor([0.1878, 0.3446, 0.4501, 0.3379, 0.3108, 0.1170, 0.1112, 0.4571, 0.4659,\n        0.4757, 0.2060, 0.3174, 0.3258, 0.3598, 0.2669, 0.5505, 0.6264, 0.1989,\n        0.5678, 0.3476, 0.3972, 0.4965, 0.3051, 0.4656, 0.3402, 0.3913, 0.4238,\n        0.1793, 0.2759, 0.1342, 0.4060, 0.4709, 0.5078, 0.2881, 0.1066, 0.2342,\n        0.5123, 0.1315, 0.3327, 0.5920, 0.3685, 0.3478, 0.2677, 0.1843, 0.1589,\n        0.1085, 0.1547, 0.3190, 0.4401, 0.2056, 0.4259, 0.4452, 0.4818, 0.3970,\n        0.4401, 0.4995, 0.1077, 0.2400, 0.3922, 0.2375, 0.1725, 0.5728, 0.4268,\n        0.3151])\nprojected large keys:\ntensor([[0.3035, 0.5216, 0.4596, 0.2893, 0.8955, 0.6188, 0.6455, 0.2561, 0.3482,\n         0.2990, 0.5600, 0.4848, 0.5095, 0.4012, 0.6952, 0.5336, 0.7148, 0.2508,\n         0.3392, 0.3222, 0.4917, 0.2481, 0.9719, 0.6077, 0.9490, 0.5704, 0.2386,\n         0.7114, 0.6478, 0.5438, 0.3272, 0.1102, 0.6529, 0.4615, 0.6076, 0.2971,\n         0.7800, 0.3415, 0.4149, 0.6020, 0.9005, 0.8435, 0.8293, 0.2204, 0.7158,\n         0.4737, 0.4997, 0.3527, 0.9515, 0.2662, 0.7417, 0.8811, 0.5258, 0.3140,\n         0.8549, 0.6960, 0.6771, 0.2255, 0.5432, 0.4350, 0.3110, 0.8551, 0.7196,\n         0.4307],\n        [0.5414, 0.8804, 1.0148, 0.4877, 0.8235, 0.7101, 0.6321, 0.6603, 0.7909,\n         0.2588, 0.7355, 1.0503, 0.8600, 0.6394, 1.0722, 0.9444, 1.1029, 0.4545,\n         0.5869, 0.5922, 0.7288, 0.4679, 1.2429, 1.0669, 1.0546, 0.6073, 0.5337,\n         0.7313, 1.0426, 0.9182, 0.4964, 0.3018, 0.9588, 0.7419, 0.6737, 0.5018,\n         0.7198, 0.4869, 0.5098, 0.8060, 1.2439, 1.0076, 0.6866, 0.3648, 0.8830,\n         0.9519, 0.7175, 0.6335, 1.1389, 0.4614, 0.7267, 1.2907, 0.4841, 0.5035,\n         0.7083, 1.0215, 1.0409, 0.5922, 0.4310, 0.4074, 0.3501, 1.0624, 1.0229,\n         0.9020],\n        [0.1838, 0.3311, 0.3795, 0.2121, 0.4295, 0.3402, 0.3010, 0.2730, 0.3651,\n         0.1327, 0.3892, 0.3841, 0.3565, 0.2441, 0.4775, 0.4100, 0.4658, 0.2066,\n         0.2301, 0.2715, 0.3052, 0.1889, 0.6106, 0.4833, 0.5087, 0.3374, 0.2239,\n         0.4179, 0.4202, 0.3830, 0.1427, 0.1232, 0.5042, 0.3661, 0.3749, 0.1694,\n         0.3759, 0.1509, 0.2579, 0.4196, 0.5787, 0.5371, 0.3629, 0.1396, 0.4025,\n         0.4415, 0.3514, 0.2355, 0.5749, 0.1862, 0.3541, 0.5809, 0.2908, 0.2299,\n         0.3590, 0.4987, 0.5014, 0.2625, 0.2681, 0.1827, 0.1524, 0.5781, 0.4842,\n         0.4073],\n        [0.1846, 0.3146, 0.1962, 0.1578, 0.7056, 0.4448, 0.5090, 0.0615, 0.1004,\n         0.2439, 0.3434, 0.2190, 0.2877, 0.2528, 0.4102, 0.2744, 0.4366, 0.1196,\n         0.1940, 0.1490, 0.3129, 0.1252, 0.6383, 0.3039, 0.6941, 0.4018, 0.0853,\n         0.5061, 0.3915, 0.3056, 0.2424, 0.0210, 0.3584, 0.2398, 0.4157, 0.1903,\n         0.6133, 0.2556, 0.2766, 0.3666, 0.5725, 0.5584, 0.6834, 0.1339, 0.5017,\n         0.1842, 0.2965, 0.2012, 0.6479, 0.1490, 0.5800, 0.5425, 0.3916, 0.1746,\n         0.7133, 0.4049, 0.3785, 0.0399, 0.4320, 0.3572, 0.2354, 0.5413, 0.4412,\n         0.1595]])\n\n\n\nattention_scores_for_small_keys = projected_small_query @ projected_small_keys.T\nprint(\"attention scores for small keys:\")\nprint(attention_scores_for_small_keys)\nattention_scores_for_large_keys = projected_large_query @ projected_large_keys.T\nprint(\"attention scores for large keys:\")\nprint(attention_scores_for_large_keys)\n\nattention scores for small keys:\ntensor([0.5867, 0.7019, 0.3464, 0.4042])\nattention scores for large keys:\ntensor([11.8494, 16.6880,  7.7068,  7.4401])\n\n\nSee how the attention score for a large projected key dimension is so much larger? Let’s see what happens if we just apply softmax to both the small and the large key:\n\nattention_weights_for_small_keys = torch.softmax(attention_scores_for_small_keys, dim=0)\nprint(\"attention weights for small keys:\")\nprint(attention_weights_for_small_keys)\nattention_weights_for_large_keys = torch.softmax(attention_scores_for_large_keys, dim=0)\nprint(\"attention weights for large keys:\")\nprint(attention_weights_for_large_keys)\n\nattention weights for small keys:\ntensor([0.2673, 0.2999, 0.2102, 0.2227])\nattention weights for large keys:\ntensor([7.8542e-03, 9.9193e-01, 1.2473e-04, 9.5529e-05])\n\n\nIf we now scale these values before applying softmax, we’ll get a different output that brings the result for a large projected key vector much closer in range compared to the small projected key:\n\nscaled_att_weights_for_small_keys = \\\n  torch.softmax(attention_scores_for_small_keys / small_proj_key_dim**0.5, dim=0)\nprint(\"scaled attention weights for small keys:\")\nprint(scaled_att_weights_for_small_keys)\nscaled_att_weights_for_large_keys = \\\n  torch.softmax(attention_scores_for_large_keys / large_proj_key_dim**0.5, dim=0)\nprint(\"scaled attention weights for large keys:\")\nprint(scaled_att_weights_for_large_keys)\n\nscaled attention weights for small keys:\ntensor([0.2626, 0.2849, 0.2216, 0.2308])\nscaled attention weights for large keys:\ntensor([0.2498, 0.4574, 0.1488, 0.1440])\n\n\n\n\n1.2.3 Single context vector (2)\nNow that we have our scaled attention weights, we can calculate the context vector for our query. We’ll do this by making a weighted combination of the projected values. Our scaled attention weights were:\n\n\nscaled attention weights, one for each token:\ntensor([0.2836, 0.2730, 0.2714, 0.1719])\n\n\nThese we’ll multiply with our projected values. Our values were:\n\n\nprojected values:\ntensor([[1.7842, 1.1135],\n        [1.6554, 1.0571],\n        [1.6442, 1.0264],\n        [1.3340, 0.8176]])\n\n\nThe calculated attention vector \\(z^{(3)}\\) for query from \\(x^{(3)}\\):\n\ncontext_vector_x3 = scaled_attention_weights_x3_as_query @ values\nprint(\"z3, the context vector for x3:\")\nprint(context_vector_x3)\nprint(\"double check: the first number is the same as:\")\nprint(0.2773*0.6307+0.2594*0.5699+0.27*0.8266+0.1933*0.6742)\nprint(\"the second number is the same as:\")\nprint(0.2773*0.4225+0.2594*0.3401+0.27*0.2332+0.1933*0.2259)\n\nz3, the context vector for x3:\ntensor([1.6336, 1.0236])\ndouble check: the first number is the same as:\n0.67623003\nthe second number is the same as:\n0.31201166\n\n\n\n\n1.2.4 All context vectors\nGiven everything we know now from above, we’ll create a torch module for self attention now:\n\nimport torch.nn as nn\ntorch.manual_seed(42)  # for reproducibility\n\nclass SelfAttention_1(nn.Module):\n    def __init__(self, d_in, d_out):\n        super().__init__()\n        self.W_query = nn.Parameter(torch.rand(d_in, d_out))\n        self.W_key = nn.Parameter(torch.rand(d_in, d_out))\n        self.W_value = nn.Parameter(torch.rand(d_in, d_out))\n    \n    def forward(self, x):\n        keys = x @ self.W_key\n        queries = x @ self.W_query\n        values = x @ self.W_value\n\n        attention_scores = queries @ keys.T\n        scaled_attention_weights = \\\n            torch.softmax(\n                attention_scores / keys.shape[-1]**0.5\n            , dim=-1)\n        context_vectors = scaled_attention_weights @ values\n        return context_vectors\n\nThe way we can use this module using our same inputs as before:\n\ntorch.manual_seed(42)  # for reproducibility\n\nprint(\"inputs: \")\nprint(inputs)\nprint(\"d_in:\", d_in, \"d_out:\", d_out)\n\nself_att = SelfAttention_1(d_in, d_out)\ncontext_vectors_1 = self_att(inputs)\nprint(\"context vectors from SelfAttention v1:\")\nprint(context_vectors_1)\nprint(\"for comparison, the context vector for x3:\")\nprint(context_vector_x3)\n\ninputs: \ntensor([[0.8823, 0.9150, 0.3829],\n        [0.9593, 0.3904, 0.6009],\n        [0.2566, 0.7936, 0.9408],\n        [0.1332, 0.9346, 0.5936]])\nd_in: 3 d_out: 2\ncontext vectors from SelfAttention v1:\ntensor([[1.6390, 1.0270],\n        [1.6341, 1.0235],\n        [1.6336, 1.0236],\n        [1.6307, 1.0217]], grad_fn=&lt;MmBackward0&gt;)\nfor comparison, the context vector for x3:\ntensor([1.6336, 1.0236])\n\n\n\ntorch.manual_seed(42)  # for reproducibility\nfrom utils import plot_attention_heatmap\n\nclass SelfAttention_2(nn.Module):\n    def __init__(self, d_in, d_out, kqv_bias=False, plot_att_weights=False):\n        super().__init__()\n        self.plot_att_weights = plot_att_weights\n        self.W_query = nn.Linear(d_in, d_out, bias=kqv_bias)\n        self.W_key = nn.Linear(d_in, d_out, bias=kqv_bias)\n        self.W_value = nn.Linear(d_in, d_out, bias=kqv_bias)\n    \n    def forward(self, x):\n        keys = self.W_key(x)\n        queries = self.W_query(x)\n        values = self.W_value(x)\n\n        attention_scores = queries @ keys.T\n        scaled_attention_weights = \\\n            torch.softmax(\n                attention_scores / keys.shape[-1]**0.5\n            , dim=-1)\n        \n        if self.plot_att_weights:\n            plot_attention_heatmap(scaled_attention_weights, [\"I\", \"am\", \"learning\", \"this\"])\n        \n        context_vectors = scaled_attention_weights @ values\n        return context_vectors\n\n\ntorch.manual_seed(42)  # for reproducibility\n\nprint(\"inputs: \")\nprint(inputs)\nprint(\"d_in:\", d_in, \"d_out:\", d_out)\n\nself_att = SelfAttention_2(d_in, d_out, kqv_bias=False, plot_att_weights=True)\ncontext_vectors_2 = self_att(inputs)\nprint(\"context vectors from SelfAttention v2:\")\nprint(context_vectors_2)\n\ninputs: \ntensor([[0.8823, 0.9150, 0.3829],\n        [0.9593, 0.3904, 0.6009],\n        [0.2566, 0.7936, 0.9408],\n        [0.1332, 0.9346, 0.5936]])\nd_in: 3 d_out: 2\n\n\n\n\n\n\n\n\n\ncontext vectors from SelfAttention v2:\ntensor([[0.4536, 0.3638],\n        [0.4547, 0.3629],\n        [0.4642, 0.3538],\n        [0.4657, 0.3523]], grad_fn=&lt;MmBackward0&gt;)\n\n\nNote how the above result is different from our previous implementation, given a different strategy of initializing the weights for our linear layer.",
    "crumbs": [
      "Notebooks",
      "Attention"
    ]
  },
  {
    "objectID": "notebooks/02-Attention.html#causal-self-attention",
    "href": "notebooks/02-Attention.html#causal-self-attention",
    "title": "Attention mechanics",
    "section": "1.3 Causal self-attention",
    "text": "1.3 Causal self-attention\nAt this point, we had every token attend to every other token. We need to introduce causality, making sure that when predicting the next token, the tokens before the current input cannot attend tokens that come after the current input. (After all, these still need to be predicted.) We’ll do this using what is called “masked attention”.\n\n1.3.1 Naive self-attention\nFirst we’ll set up the masking in a more naive way, not optimizing this yet just. Let’s first go back to calculating our queries, keys and attention scores. As a reminder: our inputs and \\(W_q\\), \\(W_{key}\\) vectors:\n\n\ninputs: tensor([[0.8823, 0.9150, 0.3829],\n        [0.9593, 0.3904, 0.6009],\n        [0.2566, 0.7936, 0.9408],\n        [0.1332, 0.9346, 0.5936]])\ninputs dimension: torch.Size([4, 3]) \n\nW_query weights: Parameter containing:\ntensor([[ 0.4414,  0.4792, -0.1353],\n        [ 0.5304, -0.1265,  0.1165]], requires_grad=True)\nW_query dimension: torch.Size([2, 3]) \n\nW_key weights: Parameter containing:\ntensor([[-0.2811,  0.3391,  0.5090],\n        [-0.4236,  0.5018,  0.1081]], requires_grad=True)\nW_key dimension: torch.Size([2, 3]) \n\n\n\nLet’s calculate our attention scores:\n\nqueries = self_att.W_query(inputs)\nkeys = self_att.W_key(inputs)\n\nprint(f\"queries: {queries}\")\nprint(f\"queries dimension: {queries.shape} \\n\")\nprint(f\"keys: {keys}\")\nprint(f\"keys dimension: {keys.shape} \\n\")\natt_scores = queries @ keys.T\nprint(f\"attention scores: {att_scores}\")\nprint(f\"attention scores dimension: {att_scores.shape} \\n\")\natt_weights = torch.softmax(att_scores / keys.shape[-1]**0.5, dim=-1)\nprint(f\"attention weights: {att_weights}\")\nprint(f\"attention weights dimension: {att_weights.shape} \\n\")\n\nqueries: tensor([[0.7761, 0.3968],\n        [0.5293, 0.5294],\n        [0.3663, 0.1453],\n        [0.4264, 0.0216]], grad_fn=&lt;MmBackward0&gt;)\nqueries dimension: torch.Size([4, 2]) \n\nkeys: tensor([[ 0.2571,  0.1269],\n        [ 0.1686, -0.1455],\n        [ 0.6758,  0.3913],\n        [ 0.5816,  0.4767]], grad_fn=&lt;MmBackward0&gt;)\nkeys dimension: torch.Size([4, 2]) \n\nattention scores: tensor([[0.2499, 0.0731, 0.6797, 0.6405],\n        [0.2032, 0.0122, 0.5648, 0.5602],\n        [0.1126, 0.0406, 0.3044, 0.2823],\n        [0.1124, 0.0687, 0.2966, 0.2582]], grad_fn=&lt;MmBackward0&gt;)\nattention scores dimension: torch.Size([4, 4]) \n\nattention weights: tensor([[0.2195, 0.1937, 0.2975, 0.2893],\n        [0.2246, 0.1962, 0.2900, 0.2891],\n        [0.2368, 0.2250, 0.2712, 0.2670],\n        [0.2371, 0.2299, 0.2701, 0.2629]], grad_fn=&lt;SoftmaxBackward0&gt;)\nattention weights dimension: torch.Size([4, 4]) \n\n\n\nWe’ll now mask out the values beyond the current input token which should not be seen during training. We can do this by zeroing out everything above the diagonal of this matrix.\n\ncontext_length = att_weights.shape[-1]\nprint(f\"context length: {context_length} \\n\")\n\nmask = torch.tril(torch.ones((context_length, context_length)))\nprint(f\"mask: {mask} \\n\")\n\nmasked_att_weights = att_weights * mask\nprint(f\"masked attention weights: {masked_att_weights}\")\n\ncontext length: 4 \n\nmask: tensor([[1., 0., 0., 0.],\n        [1., 1., 0., 0.],\n        [1., 1., 1., 0.],\n        [1., 1., 1., 1.]]) \n\nmasked attention weights: tensor([[0.2195, 0.0000, 0.0000, 0.0000],\n        [0.2246, 0.1962, 0.0000, 0.0000],\n        [0.2368, 0.2250, 0.2712, 0.0000],\n        [0.2371, 0.2299, 0.2701, 0.2629]], grad_fn=&lt;MulBackward0&gt;)\n\n\nNote how these values for each row don’t add up to one anymore.\n\nrows_sum = masked_att_weights.sum(dim=-1, keepdim=True)\nprint(f\"rows sum: {rows_sum} \\n\")\nmasked_att_weights_normalized = masked_att_weights / rows_sum\nprint(f\"masked attention weights normalized: {masked_att_weights_normalized} \\n\")\n\nrows sum: tensor([[0.2195],\n        [0.4208],\n        [0.7330],\n        [1.0000]], grad_fn=&lt;SumBackward1&gt;) \n\nmasked attention weights normalized: tensor([[1.0000, 0.0000, 0.0000, 0.0000],\n        [0.5337, 0.4663, 0.0000, 0.0000],\n        [0.3230, 0.3070, 0.3700, 0.0000],\n        [0.2371, 0.2299, 0.2701, 0.2629]], grad_fn=&lt;DivBackward0&gt;) \n\n\n\n\n\n1.3.2 Optimized self-attention\nAs a mathematical property for the softmax function, it treats \\(-\\infty\\) values as being 0 probabilities. As such we can turn our masking into:\n\nmask = torch.triu(torch.ones(context_length, context_length), diagonal=1)\nprint(f\"mask: \\n {mask} \\n\")\n\nmask: \n tensor([[0., 1., 1., 1.],\n        [0., 0., 1., 1.],\n        [0., 0., 0., 1.],\n        [0., 0., 0., 0.]]) \n\n\n\n\nmasked_scores = att_scores.masked_fill(mask.bool(), - torch.inf)\nprint(f\"masked attention scores: \\n {masked_scores} \\n\")\nmasked_att_weights_normalized = torch.softmax(masked_scores / (keys.shape[-1]**-0.5), dim=1)\nprint(f\"masked attention weights normalized: \\n {masked_att_weights_normalized} \\n\")\n\nmasked attention scores: \n tensor([[0.2499,   -inf,   -inf,   -inf],\n        [0.2032, 0.0122,   -inf,   -inf],\n        [0.1126, 0.0406, 0.3044,   -inf],\n        [0.1124, 0.0687, 0.2966, 0.2582]], grad_fn=&lt;MaskedFillBackward0&gt;) \n\nmasked attention weights normalized: \n tensor([[1.0000, 0.0000, 0.0000, 0.0000],\n        [0.5671, 0.4329, 0.0000, 0.0000],\n        [0.3111, 0.2810, 0.4080, 0.0000],\n        [0.2239, 0.2105, 0.2905, 0.2752]], grad_fn=&lt;SoftmaxBackward0&gt;) \n\n\n\nFrom here we can compute the context vectors as before.\n\ncontext_vectors_3 = masked_att_weights_normalized @ self_att.W_value(inputs)\nprint(\"context vectors  from self attention v3:\")\nprint(context_vectors_3)\n\ncontext vectors v3:\ntensor([[0.5545, 0.3680],\n        [0.5772, 0.2723],\n        [0.5198, 0.3241],\n        [0.4590, 0.3586]], grad_fn=&lt;MmBackward0&gt;)\n\n\n\n\n1.3.3 Dropouts\nDropout is a technique where at random some units are being ignored during training (and only during training). It prevents overfitting. In transformers we’ll either do this: - (most common) after calculating the attention weights, or - after the attention weights are applied to the value vectors\nLet’s see how this works for a simple tensor filled with ones and note how the resulting values are scaled up to compensate for the dropped out values and to retain balance.\n\ntorch.manual_seed(42)  # for reproducibility\ndropout = nn.Dropout(p=0.5)\ntest = torch.ones(5,5)\nprint(\"test tensor before dropout:\")\nprint(test)\nprint(\"test tensor after dropout:\")\nprint(dropout(test))\n\ntest tensor before dropout:\ntensor([[1., 1., 1., 1., 1.],\n        [1., 1., 1., 1., 1.],\n        [1., 1., 1., 1., 1.],\n        [1., 1., 1., 1., 1.],\n        [1., 1., 1., 1., 1.]])\ntest tensor after dropout:\ntensor([[2., 2., 2., 2., 0.],\n        [2., 0., 0., 2., 2.],\n        [2., 2., 0., 0., 2.],\n        [0., 2., 0., 0., 2.],\n        [2., 0., 2., 2., 2.]])\n\n\n\n\n1.3.4 Self-Attention Class\n\nclass CausalAttention(nn.Module):\n    def __init__(self, d_in, d_out, context_length, dropout, qkc_bias=False):\n        super().__init__()\n        self.d_out = d_out\n        self.W_query = nn.Linear(d_in, d_out, bias=qkc_bias)   # (d_in, d_out); d_in is the embedding vector size\n        self.W_key = nn.Linear(d_in, d_out, bias=qkc_bias)     # (d_in, d_out)\n        self.W_value = nn.Linear(d_in, d_out, bias=qkc_bias)   # (d_in, d_out)  \n        self.dropout = nn.Dropout(dropout)\n        self.register_buffer(\"mask\", \n                             torch.triu(torch.ones(context_length, context_length), diagonal=1))\n        \n    def forward(self, x):\n        \"\"\"\n            x: input vector (batch_size, num_tokens, d_in)\n        \"\"\"\n        batch_size, num_tokens, d_in = x.shape\n        keys = self.W_key(x)                         # (batch_size, num_tokens, d_in) x (d_in, d_out) = (batch_size, num_tokens, d_out)\n        queries = self.W_query(x)                    # (batch_size, num_tokens, d_in) x (d_in, d_out) = (batch_size, num_tokens, d_out)\n        values = self.W_value(x)                     # (batch_size, num_tokens, d_in) x (d_in, d_out) = (batch_size, num_tokens, d_out)   \n\n        att_scores = queries @ keys.transpose(1,2)   # (batch_size, num_tokens, d_out) @ (batch_size, d_out, num_tokens) \n                                                     # = (batch_size, num_tokens, num_tokens)\n        att_scores.masked_fill_(self.mask.bool(), -torch.inf)\n\n        att_weights = torch.softmax(\n                        att_scores / self.d_out**0.5, dim=-1\n                      )\n        att_weights = self.dropout(att_weights)      # (batch_size, num_tokens, num_tokens)\n\n        context_vec = att_weights @ values           # (batch_size, num_tokens, num_tokens) @ (batch_size, num_tokens, d_out)\n                                                     # = (batch_size, num_tokens, d_out)\n        return context_vec",
    "crumbs": [
      "Notebooks",
      "Attention"
    ]
  },
  {
    "objectID": "notebooks/02-Attention.html#multi-head-attention",
    "href": "notebooks/02-Attention.html#multi-head-attention",
    "title": "Attention mechanics",
    "section": "1.4 Multi-Head Attention",
    "text": "1.4 Multi-Head Attention\nWe will now move on from using a single attention head to multiple heads. Each of those has their own KQV tensors: \\(W_{q1}\\), \\(W_{q2}\\), \\(W_{k1}\\), \\(W_{k2}\\), \\(W_{v1}\\), \\(W_{v2}\\)",
    "crumbs": [
      "Notebooks",
      "Attention"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html",
    "href": "theory/cross-entropy-loss.html",
    "title": "Cross Entropy Loss",
    "section": "",
    "text": "The Cross-Entropy Loss function is typically used as a loss function in multi-class classification problems.\nThe output for a neural network doing classification is a set of probabilities (a so-called probability distribution where every class is associated with a probability). We try to adapt weights to optimize the resulting probabilities to match as close as possible the ground truth. To iteratively adapt the weights and improve the prediction, a loss function is needed. For multi-class classification, Cross-Entropy Loss is used.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#a-fair-coin-flip",
    "href": "theory/cross-entropy-loss.html#a-fair-coin-flip",
    "title": "Cross Entropy Loss",
    "section": "2.1 A fair coin flip",
    "text": "2.1 A fair coin flip\nAssume person A does a fair coin flip where the probability distribution of having heads is the same as having tails, each being 50 percent: \\(P(H)=0.5\\) and \\(P(T)=0.5\\)\nBoth A and B can agree to exchange the outcome of the coin flip using a single bit of information where 0 means heads and 1 means tails. When B receives the bit, he will know exactly what the outcome of the coin flip was. We can say the entropy of this probability distribution is 1 bit.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#winning-team-out-of-8",
    "href": "theory/cross-entropy-loss.html#winning-team-out-of-8",
    "title": "Cross Entropy Loss",
    "section": "2.2 Winning team out of 8",
    "text": "2.2 Winning team out of 8\nAssume on the one side of the wall person A observes one team out of 8 winning a tournament. Each team has a probability of 1/8 or 0.125 of winning, so this is again an equal probability distribution: \\(P(A)=0.125\\), \\(P(B)=0.125\\), \\(P(C)=0.125\\), …, \\(P(H)=0.125\\)\nA and B can agree to communicate the winning team using 3 bits of information. 3 bits give them \\(2^3=8\\) classes, one for each team. Let’s say “000” means team A; “001” team B; “010” team C and so on. We can say the entropy for this probability distribution is 3 bits.\nIf we generalize this: for a uniform distribution of M equally possible outcomes, the entropy is: \\(log_2\\,M\\)\nThis also holds for distributions where the number of outcomes is not exactly a power of 2, like was the case in the examples before. Let’s have a look at this in the next example.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#outcomes",
    "href": "theory/cross-entropy-loss.html#outcomes",
    "title": "Cross Entropy Loss",
    "section": "2.3 10 outcomes",
    "text": "2.3 10 outcomes\nIf A observes an outcome out of equal distributation of 10 possible outcomes (each with a probability of 0.1), then these can all be encoded using 4 bits. 4 bits allows for representing \\(2^4=16\\) states which is more than needed for our 10 possible outcomes. There are 6 “unused” states.\nWe can group outcomes in groups of 3. There are 1000 possible outcomes (3 observations, each 10 possible outcomes is \\(10*10*10\\) ). If we encode our data per 3 observations, then every such triplet can be encoded using 10 bits, giving us a total of \\(2^10=1024\\) states, just a bit more than we need to encoce our 1000 possibilities. That’s still too much but we’re already much more efficient in encoding out information as we can represent on average 1 outcome = 1/3 triplet using \\(\\frac{10}{3}=3.333...\\) bits. This is better but not perfect yet.\nWe grouped our information by 3 outcomes at a time; which gave us \\(10^3\\) outcomes. Let’s call the number of items by which we group is G instead of 3. The number of states we can present with B bits is \\(2^B\\). The most efficient encoding is one where \\(2^B = 10^G\\) where G is the number of grouped observations and B is the number of bits.\n\\[2^B = 10^G\\]\nLet’s take the \\(log_2\\) of both sides:\n\\[B = log_2 (10^G)\\] \\[B = G\\, log_2 10\\] \\[\\frac{B}{G} = log_2 10\\]\n\\(\\frac{B}{G}\\) is our entropy and \\(log_2 10\\) is approximately 3.322…\nSo for a uniform distribution of M possible outcomes (\\(U(M)\\)) in which every probability of an outcome is \\(p_{1..M} = \\frac{1}{M}\\), the entropy is: \\[H(U(M))=log_2\\,M\\]",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#non-uniform-distributions",
    "href": "theory/cross-entropy-loss.html#non-uniform-distributions",
    "title": "Cross Entropy Loss",
    "section": "2.4 Non-uniform distributions",
    "text": "2.4 Non-uniform distributions\nAs we’ve seen before, each outcome with probability \\(p\\) needs \\(log_2\\,M\\) bits to encode or \\(log_2\\,\\frac{1}{p}\\) which is \\(-log_2\\,p\\). Summing this over an entire distribution and multiplying each possible outcome with its probability gives us the entropy for a non-uniform distribution: \\(-\\sum_{i=1}^{M}\\,p_{i}\\,log_2\\,p_{i}\\)\nThis describes how much information, on average, is needed to describe the outcome for a distribution.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#shannon-entropy-formula",
    "href": "theory/cross-entropy-loss.html#shannon-entropy-formula",
    "title": "Cross Entropy Loss",
    "section": "2.5 Shannon Entropy Formula",
    "text": "2.5 Shannon Entropy Formula\nShannon Entropy is defined as: \\[H=-\\sum_{i=1}^{M}P(x_{i}) \\, log_2 \\, P(x_{i})\\]",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#comparing-distributions",
    "href": "theory/cross-entropy-loss.html#comparing-distributions",
    "title": "Cross Entropy Loss",
    "section": "3.1 Comparing distributions",
    "text": "3.1 Comparing distributions\nEntropy is the theoretical lower bound on the number of bits we need to to encode information, given a probability distribution.\nAssume two different probability distributions \\(P\\) and \\(Q\\). The most optimal encoding for \\(P\\) is given by its entropy \\(H(P)\\). Any other encoding will need more bits to convey the same events or observations. How many more bits would we need to encode information using the most optimal encoding for distribution Q, given information coming from distribution P?\nIn P, a single event or observation \\(x_{i}\\) with probability \\(p(x_{i})\\) needs \\(-log \\, p(x_{i})\\) bits to be encoded. That same event has a different probability in distribution Q and needs \\(-log \\, q(x_{i})\\) bits to be encoded in the optimal encoding for Q. The difference between the encoding for the same event in both distributions is: \\(-log \\, q(x_{i})-(-log \\, p(x_{i}))\\) or: \\[log \\, p(x_{i})-log \\, q(x_{i})\\]\nThe above equation tells us the “excess bits” for a single event \\(x_{i}\\) when encoded in Q instead of in P. To look at the average difference in number of bits across the entire distribution \\(P\\), we can multiply each event by its probably of occuring in P. This is what we call the KL divergence:\n\\[D_{KL}(p||q)=\\sum_{i=1}^N p(x_{i})\\,(log \\, p(x_{i})-log \\, q(x_{i}))\\]\nor given that \\(log \\, a - log \\, b = log \\,\\frac{a}{b}\\):\n\\[D_{KL}(p||q)=\\sum_{i=1}^N p(x_{i})\\,(log \\, \\frac{p(x_{i})}{q(x_{i})})\\]",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#kl-divergence-formula",
    "href": "theory/cross-entropy-loss.html#kl-divergence-formula",
    "title": "Cross Entropy Loss",
    "section": "3.2 KL Divergence Formula",
    "text": "3.2 KL Divergence Formula\nThe KL Divergence is defined as: \\[D_{KL}(P||Q)=\\sum_{i}P_{i}\\,log \\frac{P_{i}}{Q_{i}}\\]",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#further-intuition",
    "href": "theory/cross-entropy-loss.html#further-intuition",
    "title": "Cross Entropy Loss",
    "section": "3.3 Further intuition",
    "text": "3.3 Further intuition\nImagine we have 2 coins: one fair coin with an equal distribution of 0.5 for each outcome (heads or tails) and a biased coin with probability \\(p\\) for heads and \\(q\\) for tails. We’re trying to measure how different those are. If \\(p\\) is close to 0.5 then it would be easy to confuse both distributions by looking at the outcomes they generate. On the opposite side, if \\(p\\) is close to 0.95 for example, then it would be fairly obvious to dinstinguish between both distributions by observing a series of outcomes.\nTo quantitatively measure the difference between two distributions we can look if a given sequence would be equally probably in both. If they assign similar probabilities to similar sequences that implies both are very similar.\nWe can generate observations using coin 1 then calculating the probability of coin 2 generating the observations. Then we can compare that probability to the probability of coin 1. If those are similar, then the distribution is similar or vice versa. We could then take the following ratio: \\[\\frac{P_{\\text{observations from coin 1}}}{P_{\\text{observations from coin 2}}}\\]\nLet’s say our fair coin has probabilities: \\[\\begin{cases}p_{1} & \\text{for heads} \\\\ p_{2} & \\text{for tails} \\end{cases}\\]\nWe flip this coin \\(n\\) times: H T T H H\nThen we work out the probability of coin 1 generating this sequence. To do this we multiply by \\(p_{1}\\) when we see heads and by \\(p_{2}\\) when we see tails: \\(p_{1} \\cdot p_{2} \\cdot p_{2} \\cdot p_{1} \\cdot p_{1}\\)\nOur biased coin has probabilities: \\[\\begin{cases}q_{1} & \\text{for heads} \\\\ q_{2} & \\text{for tails} \\end{cases}\\]\nLet’s work out the probably of coin 2 generating this sequence. In a similar way this is: \\(q_{1} \\cdot q_{2} \\cdot q_{2} \\cdot q_{1} \\cdot q_{1}\\)\nIf \\(N_{H}\\) is the number of times we got heads and \\(N_{T}\\) is the number of times we got tails, we can simplify both as: \\[P(\\text{observations from coin 1})=p_{1}^{N_{H}}\\cdot p_{2}^{N_{T}}\\] and in the biased distribution: \\[P(\\text{observations from coin 2})=q_{1}^{N_{H}}\\cdot q_{2}^{N_{T}}\\]\nCalculating the ratio of both:\n\\[\\frac{P_{\\text{observations from coin 1}}}{P_{\\text{observations from coin 2}}}=\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\]\nLet’s normalize this for sample size by raising this to the power of \\(\\frac{1}{N}\\): \\[\\left(\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\right)^{\\frac{1}{N}}\\]\nNow let’s take the log of this expression:\n\\[log \\left(\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\right)^{\\frac{1}{N}}\\] \\[=\\frac{1}{N} log \\left(\\frac{p_{1}^{N_{H}}p_{2}^{N_{T}}}{q_{1}^{N_{H}}q_{2}^{N_{T}}}\\right)\\] \\[=\\frac{1}{N} \\left( log\\,p_{1}^{N_{H}} + log\\,p_{2}^{N_{T}} - log\\,q_{1}^{N_{H}} -  log\\,q_{2}^{N_{T}} \\right)\\] \\[=\\frac{1}{N}log\\,p_{1}^{N_{H}} + \\frac{1}{N}log\\,p_{2}^{N_{T}} - \\frac{1}{N}log\\,q_{1}^{N_{H}} - \\frac{1}{N}log\\,q_{2}^{N_{T}}\\] \\[=\\frac{N_{H}}{N}log\\,p_{1} + \\frac{N_{T}}{N}log\\,p_{2} - \\frac{N_{H}}{N}log\\,q_{1} - \\frac{N_{T}}{N}log\\,q_{2}\\] \\[=p_{1}log\\,p_{1} + p_{2}log\\,p_{2} - p_{1}log\\,q_{1} - p_{2}log\\,q_{2}\\] \\[=p_{1}log\\,p_{1} - p_{1}log\\,q_{1} + p_{2}log\\,p_{2} - p_{2}log\\,q_{2}\\] \\[=p_{1}log\\frac{p_{1}}{q_{1}} + p_{2}log\\frac{p_{2}}{q_{2}}\\]\nNote how this formula is the formula for KL divergence.",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#articles",
    "href": "theory/cross-entropy-loss.html#articles",
    "title": "Cross Entropy Loss",
    "section": "8.1 Articles",
    "text": "8.1 Articles\n\nMachineLearningMastery - Cross Entropy for Machine Learning\nTowardsDataScience - Cross Entropy for Dummies\nTowardsDataScience - Cross Entropy for Classification\nKL divergence explained",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  },
  {
    "objectID": "theory/cross-entropy-loss.html#videos",
    "href": "theory/cross-entropy-loss.html#videos",
    "title": "Cross Entropy Loss",
    "section": "8.2 Videos",
    "text": "8.2 Videos\n\nIntuitively understanding Shannon Entropy\nIntuitively Understanding the KL Divergence\nIntuitively Understanding the Cross Entropy Loss",
    "crumbs": [
      "Theory",
      "Cross Entropy Loss"
    ]
  }
]